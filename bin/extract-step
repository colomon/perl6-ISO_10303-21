use v6;
use ISO_10303_21::Grammar;
use ISO_10303_21::Actions;

# sub follow-chain(%entities, %reverse, $id) {
#     # say :$id.perl;
#     my $desc = "$id ({ %entities{$id}.map(*.keyword) })";
#     if %entities{$id}.?keyword ~~ /SHAPE_REPRESENTATION$/ {
#         # say "    finished $desc";
#         return $desc;
#     }
#     my $owner;
#     for %reverse{$id}.list -> $possible-owner {
#         # say "        considering $possible-owner { %entities{$possible-owner}.map(*.keyword) }";
#         next if %entities{$possible-owner}.?keyword eq "STYLED_ITEM" | "PRESENTATION_LAYER_ASSIGNMENT";
#         $owner = $possible-owner;
#     }
#     return $desc unless $owner;
#     $desc, follow-chain(%entities, %reverse, $owner);
# }
# 
# sub face-to-edges(%entities, $face) {
#     my @edges;
#     for %entities{$face}.parameters[1].list -> $loop {
#         if my $loop-entity = %entities{$loop} {
#             if my $edge-loop-entity = %entities{$loop-entity.parameters[1]} {
#                 @edges.push(|$edge-loop-entity.parameters[1].list);
#             }
#         } else {
#             $*ERR.say: "Unable to find loop $loop";
#         }
#     }
# 
#     for @edges -> $edge is rw {
#         if %entities{$edge} ~~ ISO_10303_21::Record
#            && %entities{$edge}.keyword eq "ORIENTED_EDGE" {
#             $edge = %entities{$edge}.parameters[3];
#         }
#     }
# 
#     set(|@edges);
# }

sub MAIN($file, $out-file, *@ids) {
    my $file-data = slurp($file, encoding => "latin1");
    $file-data .= subst(/"/*" .*? "*/"/, " ", :global);
    my $step-data = ISO_10303_21::Actions.new;
    my $match = ISO_10303_21::LooseGrammar.parse($file-data, :rule<exchange_file>, :actions($step-data));
    unless $match ~~ Match && $match {
        $*ERR.say: "Something went wrong with the import.";
        next;
    }
    $*ERR.say: "$file read and parsed";

    my $needed = SetHash.new;
    sub add-sub-entities($id) {
        return if $needed{$id};
        $needed{$id} = True;
        
        for |$step-data.entities{$id} -> $entity {
            for $entity.entity_instances -> $sub-id {
                add-sub-entities($sub-id);
            }
        }
    }
    
    for @ids -> $id {
        add-sub-entities("#" ~ $id);
    }
    
    # output
    my $out = $out-file.IO.open(:w);
    for $needed.keys -> $id {
        $out.say: "$id={ $step-data.entities-text{$id} };";
    }
}
